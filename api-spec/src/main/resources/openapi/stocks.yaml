openapi: 3.0.0F
info:
  title: Stocks Management API
  version: "1.0.0"
  description: API for managing stock investments, fund transfers, and portfolio simulations.
servers:
  - url: http://localhost:8080/api
paths:
  /users:
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    get:
      summary: Retrieve all users
      operationId: getAllUsers
      tags:
        - User
      responses:
        '200':
          description: A list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientModel'
  /users/{id}:
    get:
      summary: Retrieve a user by ID
      operationId: getUserById
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update an existing user
      operationId: updateUser
      tags:
        - User
      parameters:
        - name: id
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: User successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      summary: Delete a user by ID
      operationId: deleteUser
      tags:
        - User
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User successfully deleted
        '404':
          description: User not found
  /users/by-email/{email}:
    get:
      summary: Find a user by email
      operationId: getUserByEmail
      tags:
        - User
      parameters:
        - name: email
          in: path
          description: The email address of the user to retrieve
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
#...........................................................
  /stocks:
    get:
      summary: List all available stocks
      operationId: listStocks
      tags:
        - Stock
      responses:
        '200':
          description: List of stocks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stock'
    post:
      summary: Create a new stock (admin only)
      operationId: createStock
      tags:
        - Stock
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Stock'
      responses:
        '201':
          description: Stock successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'

  /stocks/{symbol}:
    get:
      summary: Retrieve a stock by its symbol
      operationId: getStockBySymbol
      tags:
        - Stock
      parameters:
        - name: symbol
          in: path
          required: true
          description: The stock symbol to retrieve (e.g., AAPL, GOOGL)
          schema:
            type: string
      responses:
        '200':
          description: Stock details found successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'
        '404':
          description: Stock not found

  /transactions:
    get:
      summary: List transactions for a user
      operationId: listTransactions
      tags:
        - Transaction
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
#    post:
#      summary: Record a new transaction (buy, sell, deposit, withdrawal)
#      operationId: createTransaction
#      tags:
#        - Transaction
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Transaction'
#      responses:
#        '201':
#          description: Transaction recorded
  /portfolio:
    get:
      summary: Get the portfolio details for a user
      operationId: getPortfolio
      tags:
        - Portfolio
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Portfolio details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
  /simulate:
    post:
      summary: Run a simulation on the user's portfolio
      operationId: simulatePortfolio
      tags:
        - Simulation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimulationRequest'
      responses:
        '200':
          description: Simulation results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulationResult'
components:
  schemas:
    ClientModel:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          description: The user’s full name
        email:
          type: string
          format: email
          description: The user’s email address
        role:
          type: string
          enum:
            - USER
            - ADMIN
          description: The user’s role in the system
        iban:
          type: string
          description: The user’s bank account IBAN
        bankAccountBalance:
          type: number
          format: double
          description: The current balance of the user’s bank account
        investmentAccountBalance:
          type: number
          format: double
          description: The current balance of the user’s investment account
      required:
        - name
        - email
        - role
        - iban
        - bankAccountBalance
        - investmentAccountBalance
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        email:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
        investmentAccount:
          $ref: '#/components/schemas/InvestmentAccount'
        bankAccount:
          $ref: '#/components/schemas/BankAccount'
    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - role
      properties:
        name:
          type: string
        email:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
    UserRole:
      type: string
      enum:
        - USER
        - ADMIN
    BankAccount:
      type: object
      properties:
        iban:
          type: string
        balance:
          type: number
          format: double
    InvestmentAccount:
      type: object
      properties:
        id:
          type: integer
          format: int64
        balance:
          type: number
          format: double
        portfolio:
          $ref: '#/components/schemas/Portfolio'
    Portfolio:
      type: object
      properties:
        id:
          type: integer
          format: int64
        holdings:
          type: array
          items:
            $ref: '#/components/schemas/StockHolding'
    StockHolding:
      type: object
      properties:
        id:
          type: integer
          format: int64
        sharesOwned:
          type: number
          format: double
        stock:
          $ref: '#/components/schemas/Stock'
    Stock:
      type: object
      properties:
        id:
          type: integer
          format: int64
        symbol:
          type: string
        currency:
          type: string
        currentPrice:
          type: number
          format: BigDecimal
        volatility:
          type: number
          format: double
        dividendYield:
          type: number
          format: double
        expectedReturn:
          type: number
          format: double
    Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
        type:
          $ref: '#/components/schemas/TransactionType'
        amount:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
        stock:
          $ref: '#/components/schemas/Stock'
    TransactionType:
      type: string
      enum:
        - BUY
        - SELL
        - DEPOSIT
        - WITHDRAWAL
    SimulationRequest:
      type: object
      required:
        - userId
        - months
      properties:
        userId:
          type: integer
          format: int64
        months:
          type: integer
    SimulationResult:
      type: object
      properties:
        portfolioValue:
          type: number
          format: double
        details:
          type: string